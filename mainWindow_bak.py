"""Subclass of wxApplicationFrame, which is generated by wxFormBuilder."""

import matplotlib
matplotlib.interactive(True)
matplotlib.use('WXAgg')

import wx
import wxApplicationProject
import cv2

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg
from matplotlib.backends.backend_wx import NavigationToolbar2Wx, wxc
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

import numpy as np

import displacementWindow
import pcaWindow
import spatialDifferenceWindow
import dampedAnalysisWindow
import SettingDialog

import setObsPoint_Dialog
import OP_Dialog

from my_modules import search_ext
from my_modules.dialog.save import save_pickle
import os
import pickle

iconW = 24
iconH = 24
iconW2 = 36
iconH2 = 36
iconSize = wx.Size(iconW,iconH)

def cv2_image_to_wx_image(cv2_image): # OpenCV画像を、wx画像へ変換
    # type: (np.ndarray) -> wx.Image
    height, width = cv2_image.shape[:2]
    wx_image = wx.EmptyImage(width, height)  # type: wx.Image
    wx_image.SetData(cv2.cvtColor(cv2_image, cv2.COLOR_BGR2RGB))
    return wx_image


def createBitmapIconFromPng(file,w,h):
	image = wx.Image(file)
	image.Rescale(w,h, wx.IMAGE_QUALITY_BILINEAR )
	return image.ConvertToBitmap()

def createMainevt(self):
	self.Bind(wx.EVT_MENU, self.m_displayMenuItem9MenuSelection,id = self.m_displayMenuItem9.GetId())
	self.Bind(wx.EVT_MENU, self.m_analyzeMenuItem1MenuSelection,id = self.m_analyzeMenuItem1.GetId())
def createDialog(self):
    OP_Dialog = m_OP_Dialog()

def createMainInit(self):
	# ドラッグしているのかのフラグ
	self.DragFlag = False

	# グラフの設定
	self.axes = None
	self.artist = None
	self.backend = None
	self.cursor = None

	# 観測点設定ダイアログ
	#self.opDialog = setObsPointDialog()
	print('観測点設定ダイアログ')
	# 観測点設定ダイアログ
	#self.params = self.opDialog.getParam(self.opDialog)

	self.results = []

	self.pxpys_run = None
	self.bss_run = None
	self.pxpys = []
	self.bss = []
	#self.bs = np.array([self.params["block_w"], self.params["block_h"]])
	self.is_background = False  # background選択フラグ
	self.pxpys_background = []
	self.bss_background = []
	self.is_pyramid = False  # pyramid検出フラグ
	self.layers_bs = []
	self.layers_stride = []
	self.pyramid_pxpys = None
	self.pyramid_bss = None
	self.pyramid_pxpys_bg = None
	self.pyramid_bss_bg = None
	self.expand_pxpys = None
	self.expand_bss = None
	self.expand_pxpys_bg = None
	self.expand_bss_bg = None
	self.len_pyramid = 0
	self.is_sampling = False

	self.press_count = False
	self.first_pos = []

	self.file_list = []
	self.folder_path = None
	self.image = None
	self.base_image = None
	self.frame_number = None

	self.cvimg_rgb = None


def createToolbar(self):
	# ツールバーの設定
	self.m_wxApplicationToolbar.SetToolSeparation( 5 )
	self.m_wxApplicationToolbar.SetMargins( wx.Size( 3,3 ) )
	self.m_wxApplicationToolbar.SetToolBitmapSize( iconSize )
	# 開くボタン
	self.m_openTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"開く", createBitmapIconFromPng(u"icons/open.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# 保存ボタン	
	self.m_saveTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"保存", createBitmapIconFromPng(u"icons/save.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# キャプチャーボタン	
	self.m_captureTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"キャプチャー", createBitmapIconFromPng(u"icons/capture.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	#	
	self.m_wxApplicationToolbar.AddSeparator()
	# 画像の情報ボタン
	self.m_imageInfoTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"画像の情報", createBitmapIconFromPng(u"icons/info.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# ズームインボタン
	self.m_zoomInTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"ズームイン", createBitmapIconFromPng(u"icons/zoomin.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# ズームインボタン	
	self.m_zoomOutTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"ズームアウト", createBitmapIconFromPng(u"icons/zoomout.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# 前のファイル	
	self.m_prevFileTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"前のファイル", createBitmapIconFromPng(u"icons/left.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# 次のファイル
	self.m_nextFileTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"次のファイル", createBitmapIconFromPng(u"icons/right.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	#	
	self.m_wxApplicationToolbar.AddSeparator()
	# 変位分析	
	self.m_displacementTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"変位分析", createBitmapIconFromPng(u"icons/icon_001030_256.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# 振動モード
	self.m_vibrationModeTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"振動モード", createBitmapIconFromPng(u"icons/icon_105950_256.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# 空間差分	
	self.m_spatialDifferenceTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"空間差分", createBitmapIconFromPng(u"icons/icon_156790_256.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	# 減衰分析	
	self.m_dampedAnalysisTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"減衰分析", createBitmapIconFromPng(u"icons/icon_162440_256.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	#
	self.m_wxApplicationToolbar.AddSeparator()
	# 設定	
	self.m_settingTool = self.m_wxApplicationToolbar.AddTool( wx.ID_ANY, u"設定", createBitmapIconFromPng(u"icons/setting.png",iconW,iconH), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None ) 
	#
	self.m_wxApplicationToolbar.Realize() 
	# Connect Events
	self.Bind( wx.EVT_TOOL, self.m_openToolClick, id = self.m_openTool.GetId() )
	self.Bind( wx.EVT_TOOL, self.m_displacementToolClick, id = self.m_displacementTool.GetId() )
	self.Bind( wx.EVT_TOOL, self.m_vibrationModeToolClick, id = self.m_vibrationModeTool.GetId() )
	self.Bind( wx.EVT_TOOL, self.m_spatialDifferenceToolClick, id = self.m_spatialDifferenceTool.GetId() )
	self.Bind( wx.EVT_TOOL, self.m_dampedAnalysisToolClick, id = self.m_dampedAnalysisTool.GetId() )
	self.Bind( wx.EVT_TOOL, self.m_settingToolToolClick, id = self.m_settingTool.GetId() )

def createMovieTool(self):
		bSizer14 = wx.BoxSizer( wx.VERTICAL )		

		self.figure = Figure()
		self.figure.set_facecolor((0, 0, 0))
		self.canvas = FigureCanvasWxAgg(self, -1, self.figure)
		self.canvas.SetSize((980, 600))
		self.navigationToolbar = NavigationToolbar2Wx(self.canvas)
		self.navigationToolbar.Realize()
		bSizer14.Add(self.canvas, 0, wx.LEFT | wx.EXPAND)
		bSizer14.Add(self.navigationToolbar, 0, wx.LEFT | wx.EXPAND)
		self.navigationToolbar.update()
		
		bSizer19 = wx.BoxSizer( wx.HORIZONTAL )		
		self.m_slider1 = wx.Slider( self, wx.ID_ANY, 0, 0, 100, wx.DefaultPosition, wx.Size(830,25), wx.SL_HORIZONTAL )
		bSizer19.Add( self.m_slider1, 0, wx.ALIGN_BOTTOM, 20 )		
		self.m_textCtrl3 = wx.TextCtrl( self, wx.ID_ANY, u"---", wx.DefaultPosition, wx.DefaultSize, wx.TE_CENTRE )
		bSizer19.Add( self.m_textCtrl3, 0, wx.ALIGN_BOTTOM, 20 )				
		bSizer14.Add( bSizer19, 1, wx.ALIGN_BOTTOM, 20 )
		
		bSizer21 = wx.BoxSizer( wx.VERTICAL )
		bSizer22 = wx.BoxSizer( wx.HORIZONTAL )		
		self.m_bpButton14 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/player-4.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton14, 0, wx.ALIGN_CENTER, 5 )		
		self.m_bpButton15 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/player-6.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton15, 0, wx.ALIGN_CENTER, 5 )		
		self.m_bpButton16 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/player-2.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton16, 0, wx.ALIGN_CENTER, 5 )		
		self.m_bpButton17 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/player-1.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton17, 0, wx.ALIGN_CENTER, 5 )		
		self.m_bpButton18 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/player-5.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton18, 0, wx.ALIGN_CENTER, 5 )		
		self.m_bpButton19 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/player-3.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton19, 0, wx.ALIGN_CENTER, 5 )		
		self.m_bpButton20 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/home.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton20, 0, wx.ALIGN_CENTER, 5 )		
		self.m_bpButton21 = wx.BitmapButton( self, wx.ID_ANY, createBitmapIconFromPng(u"icons/capture.png",iconW2,iconH2), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
		bSizer22.Add( self.m_bpButton21, 0, wx.ALIGN_CENTER, 5 )		
		self.m_debugButton = wx.Button( self, wx.ID_ANY, u"デバッグ", wx.DefaultPosition, wx.DefaultSize, 0 )
		bSizer22.Add( self.m_debugButton, 0, wx.ALIGN_CENTER, 5 )
		self.m_startMeasureButton = wx.Button( self, wx.ID_ANY, u"計測開始", wx.DefaultPosition, wx.DefaultSize, 0 )
		bSizer22.Add( self.m_startMeasureButton, 0, wx.ALIGN_CENTER, 5 )

		#BoxSizer( wx.HORIZONTAL )の場合右寄せが効かないので、スペースで代用する
		self.m_staticText4 = wx.StaticText( self, wx.ID_ANY, u"　　　　　　                         　　　　　", wx.DefaultPosition, wx.DefaultSize, 0 )
		self.m_staticText4.Wrap( -1 )
		bSizer22.Add( self.m_staticText4, 0, wx.ALL, 5 )
		self.m_staticText3 = wx.StaticText( self, wx.ID_ANY, u"表示倍率：", wx.DefaultPosition, wx.DefaultSize, wx.TE_CENTRE )
		self.m_staticText3.Wrap( -1 )
		self.m_staticText3.SetForegroundColour('#000000')
		bSizer22.Add( self.m_staticText3, 0, wx.ALIGN_CENTER)		
		self.m_textCtrl4 = wx.TextCtrl( self, wx.ID_ANY, u"300",  wx.DefaultPosition, wx.DefaultSize, wx.TE_CENTRE)
		bSizer22.Add( self.m_textCtrl4, 0, wx.ALIGN_CENTER)

		bSizer21.Add( bSizer22, 1, wx.EXPAND, 5 )	
		bSizer14.Add( bSizer21, 1, wx.EXPAND, 5 )
		self.SetSizer(bSizer14)
		#self.SetSizer( bSizer14 )			

# Implementing wxApplicationFrame
class setOP_Dialog(OP_Dialog.m_OP_Dialog):
	"""
    観測点設定ダイアログ
    """
	def __init__(self, parent=None):
		OP_Dialog.m_OP_Dialog.__init__(self, parent)
		self.m_sdbSizerCancel.Bind( wx.EVT_BUTTON, self.frame_close )
		self.m_sdbSizerOK.Bind( wx.EVT_BUTTON, self.getParam )
		print('init')

		print('init self.m_spinCtrl1=', self.m_spinCtrl1.GetValue())
		self.params = {}

	def getParam(self, event):
		# パラメータの取得
		print('self.m_spinCtrl1=', self.m_spinCtrl1.GetValue())
		self.params["block_w"] = int(self.m_spinCtrl1.GetValue())
		self.params["block_h"] = int(self.m_spinCtrl2.GetValue())
		self.params["shift"] = int(self.m_spinCtrl3.GetValue())
		self.params["scaled"] = int(self.m_spinCtrl4.GetValue())
		self.params["type"] = self.m_comboBox2.GetValue()
		self.params["stride_x"] = int(self.m_spinCtrl5.GetValue())
		self.params["stride_y"] = int(self.m_spinCtrl6.GetValue())
		self.params["fileno"] = self.m_lineEdit.GetValue()
		self.params["groupno"] = self.m_textCtrl11.GetValue()
		print('self.params', self.params)

		self.Close(True)
		return self.params

	def frame_close(self, event):

		self.Close(True)
class setOP_Dialog2(setObsPoint_Dialog.m_setObsPoint_Dialog):
	"""
    観測点設定ダイアログ
    """
	def __init__(self, parent=None):
		setObsPoint_Dialog.m_setObsPoint_Dialog.__init__(self, parent)
		self.m_button4.Bind( wx.EVT_BUTTON, self.reset )
		self.m_sdbSizerCancel.Bind( wx.EVT_BUTTON, self.frame_close )
		self.m_sdbSizerOK.Bind( wx.EVT_BUTTON, self.getParam )
		self.params = {}

	def getParam(self, event):
		# パラメータの取得
		print('self.m_spinCtrl1=', self.m_spinCtrl1.GetValue())
		self.params["block_w"] = int(self.m_spinCtrl1.GetValue())
		self.params["block_h"] = int(self.m_spinCtrl2.GetValue())
		self.params["shift"] = int(self.m_spinCtrl3.GetValue())
		self.params["scaled"] = int(self.m_spinCtrl4.GetValue())
		self.params["type"] = self.m_comboBox1.GetValue()
		#self.params["num_block"] = int(self.ui.spinBox_7.text())
		self.params["stride_x"] = int(self.m_spinCtrl5.GetValue())
		self.params["stride_y"] = int(self.m_spinCtrl6.GetValue())
		self.params["fileno"] = self.m_lineEdit.GetValue()
		self.params["groupno"] = self.m_textCtrl11.GetValue()
		print('self.params', self.params)
		print('self.params', self.params)

		self.Close(True)
		return self.params

	def reset(self, event):
		self.m_spinCtrl1.SetValue(32)
		self.m_spinCtrl2.SetValue(32)
		self.m_spinCtrl3.SetValue(5)
		self.m_spinCtrl4.SetValue(2)
		self.m_spinCtrl5.SetValue(32)
		self.m_spinCtrl6.SetValue(32)
		self.m_comboBox1.SetValue('点')

	def frame_close(self, event):

		self.Close(True)

class setSt_Dialog2(SettingDialog.M_SettingDialog, SettingDialog.P_SettingDialog2):
	"""
    観測点設定ダイアログ
    """
	def __init__(self, parent=None):
		#super().__init__(self, parent)
		SettingDialog.M_SettingDialog.__init__(self, parent)
		SettingDialog.P_SettingDialog2.__init__(self, parent)
		self.m_button1.Bind( wx.EVT_BUTTON, self.getParam )
		self.m_button2.Bind( wx.EVT_BUTTON, self.frame_close )

		self.params = {}

	def getParam(self, event):
		# パラメータの取得
		self.Close(True)
		return self.params

	def frame_close(self, event):

		self.Close(True)

class MainWindow( wxApplicationProject.wxApplicationFrame ):
	def __init__( self, parent ):
		wxApplicationProject.wxApplicationFrame.__init__( self, parent )

		createMainevt(self)
		createToolbar(self)
		createMovieTool(self)
		createMainInit(self)
	#メニューバー（観測点の指定）
	def m_analyzeMenuItem1MenuSelection( self, event ):
		#frame = OP_Dialog.m_OP_Dialog(self)
		frame = setOP_Dialog(self)
		frame.Show(True)
		#event.Skip()

	#メニューバー（観測点の表示）
	def m_displayMenuItem9MenuSelection( self, event ):
		frame = setOP_Dialog2(self)
		frame.Show(True)
		#event.Skip()

	# Virtual event handlers, overide them in your derived class

	def m_openToolClick( self, event ):

		dialog = wx.FileDialog(None, u'ファイルを選択してください', "", "", "*.pickle")
		if dialog.ShowModal() == wx.ID_OK:
			self.pickle_filepath = dialog.GetFilename()
			print('ok')
			print('self.pickle_filepath)=', self.pickle_filepath)
			self.dirpath = os.path.dirname(self.pickle_filepath)
			with open(self.pickle_filepath, "rb") as f:
				data = pickle.load(f)
			# 画像ファイルの一覧取得（pgm, png, bmp形式に対応）
			self.image_filelist = search_ext.search(self.dirpath, ext_list=["pgm", "png", "bmp"])

			# 変位データのロード
			self.dis = data["displacement"].sel(layer=0)
			self.pxpys = data["pxpys"].sel(layer=0)
			self.bss = data["bss"].sel(layer=0)

			# 画像のロード
			frame = 0
			cv2img = cv2.imread(self.image_filelist[frame])
			self.im = cv2.cvtColor(cv2img, cv2.COLOR_BGR2RGB)  # matplot形式
			self.figure.subplots_adjust(left=0.005, right=0.995, bottom=0.1, top=0.9)
			self.axes = self.figure.add_subplot(111, facecolor='black')

			self.axes.minorticks_on()
			self.axes.tick_params(axis='both', which='major', direction='inout', colors="black", labelsize=8, bottom='on',
							  left='on')
			self.axes.grid(True)
			self.axes.tick_params(axis='both', which='minor', direction='inout', length=5, colors="black")
			self.axes.imshow(self.im)
			self.figure.canvas.draw()

	# Virtual event handlers, overide them in your derived class
	def m_displacementToolClick( self, event ):
		frame = displacementWindow.DisplacementWindow(self)
		frame.Show(True)
		event.Skip()

	# Virtual event handlers, overide them in your derived class
	def m_vibrationModeToolClick( self, event ):
		frame = pcaWindow.PCAWindow(self)
		frame.Show(True)
		event.Skip()

	# Virtual event handlers, overide them in your derived class
	def m_spatialDifferenceToolClick( self, event):
		frame = spatialDifferenceWindow.SpatialDifferenceWindow(self)
		frame.Show(True)
		event.Skip()
	
	# Virtual event handlers, overide them in your derived class
	def m_dampedAnalysisToolClick( self, event):
		frame = dampedAnalysisWindow.DampedAnalysisWindow(self)
		frame.Show(True)
		event.Skip()

	# ツールバー設定画面
	# Virtual event handlers, overide them in your derived class
	def m_settingToolToolClick( self, event):
		frame = setSt_Dialog2(self)
		frame.Show(True)
		event.Skip()

